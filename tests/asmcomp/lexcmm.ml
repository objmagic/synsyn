# 16 "lexcmm.mll"
 
open Parsecmm

type error =
    Illegal_character
  | Unterminated_comment
  | Unterminated_string

exception Error of error

(* For nested comments *)

let comment_depth = ref 0

(* The table of keywords *)

let keyword_table =
  Misc.create_hashtable 149 [
    "absf", ABSF;
    "addr", ADDR;
    "align", ALIGN;
    "alloc", ALLOC;
    "and", AND;
    "app", APPLY;
    "assign", ASSIGN;
    "byte", BYTE;
    "case", CASE;
    "catch", CATCH;
    "checkbound", CHECKBOUND;
    "exit", EXIT;
    "extcall", EXTCALL;
    "float", FLOAT;
    "float32", FLOAT32;
    "float64", FLOAT64;
    "floatofint", FLOATOFINT;
    "function", FUNCTION;
    "half", HALF;
    "if", IF;
    "int", INT;
    "int32", INT32;
    "intoffloat", INTOFFLOAT;
    "string", KSTRING;
    "let", LET;
    "load", LOAD;
    "mod", MODI;
    "mulh", MULH;
    "or", OR;
    "proj", PROJ;
    "raise", RAISE Lambda.Raise_regular;
    "reraise", RAISE Lambda.Raise_reraise;
    "raise_notrace", RAISE Lambda.Raise_notrace;
    "seq", SEQ;
    "signed", SIGNED;
    "skip", SKIP;
    "store", STORE;
    "switch", SWITCH;
    "try", TRY;
    "unit", UNIT;
    "unsigned", UNSIGNED;
    "val", VAL;
    "while", WHILE;
    "with", WITH;
    "xor", XOR;
    "addraref", ADDRAREF;
    "intaref", INTAREF;
    "floataref", FLOATAREF;
    "addraset", ADDRASET;
    "intaset", INTASET;
    "floataset", FLOATASET
]

(* To buffer string literals *)

let initial_string_buffer = Bytes.create 256
let string_buff = ref initial_string_buffer
let string_index = ref 0

let reset_string_buffer () =
  string_buff := initial_string_buffer;
  string_index := 0

let store_string_char c =
  if !string_index >= Bytes.length (!string_buff) then begin
    let new_buff = Bytes.create (Bytes.length (!string_buff) * 2) in
    Bytes.blit (!string_buff) 0 new_buff 0 (Bytes.length (!string_buff));
    string_buff := new_buff
  end;
  Bytes.unsafe_set (!string_buff) (!string_index) c;
  incr string_index

let get_stored_string () =
  let s = Bytes.sub_string (!string_buff) 0 (!string_index) in
  string_buff := initial_string_buffer;
  s

(* To translate escape sequences *)

let char_for_backslash = function
    'n' -> '\010'
  | 'r' -> '\013'
  | 'b' -> '\008'
  | 't' -> '\009'
  | c   -> c

let char_for_decimal_code lexbuf i =
  Char.chr(100 * (Char.code(Lexing.lexeme_char lexbuf i) - 48) +
               10 * (Char.code(Lexing.lexeme_char lexbuf (i+1)) - 48) +
                    (Char.code(Lexing.lexeme_char lexbuf (i+2)) - 48))

(* Error report *)

let report_error lexbuf msg =
  prerr_string "Lexical error around character ";
  prerr_int (Lexing.lexeme_start lexbuf);
  match msg with
    Illegal_character ->
      prerr_string ": illegal character"
  | Unterminated_comment ->
      prerr_string ": unterminated comment"
  | Unterminated_string ->
      prerr_string ": unterminated string"


# 126 "lexcmm.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\210\255\212\255\084\000\038\001\060\001\159\000\220\255\
    \221\255\002\000\022\000\002\000\160\000\236\255\003\000\246\255\
    \023\000\249\255\035\001\029\000\005\000\252\255\253\255\254\255\
    \238\255\239\255\046\000\012\000\230\255\250\255\241\255\242\255\
    \248\255\078\000\244\255\245\255\228\255\229\255\231\255\120\000\
    \234\255\235\255\211\255\226\255\161\000\223\255\224\255\218\255\
    \093\001\071\001\215\255\046\000\216\000\133\001\156\001\050\001\
    \096\000\188\001\211\001\091\001\252\255\253\255\005\000\017\000\
    \255\255\254\255\004\000\250\255\251\255\004\002\255\255\226\001\
    \253\255\142\001\247\001\252\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\042\000\039\000\039\000\038\000\255\255\
    \255\255\045\000\030\000\023\000\028\000\255\255\045\000\255\255\
    \008\000\255\255\018\000\004\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\015\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\012\000\255\255\255\255\255\255\255\255\255\255\022\000\
    \255\255\255\255\255\255\255\255\033\000\255\255\255\255\255\255\
    \255\255\041\000\255\255\255\255\255\255\255\255\039\000\039\000\
    \039\000\041\000\255\255\255\255\255\255\255\255\003\000\003\000\
    \255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\
    \255\255\001\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \255\255\000\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\060\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\067\000\000\000\000\000\255\255\000\000\255\255\
    \000\000\255\255\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\020\000\000\000\020\000\020\000\020\000\020\000\
    \000\000\020\000\020\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\009\000\002\000\000\000\000\000\020\000\070\000\000\000\
    \011\000\007\000\010\000\019\000\042\000\006\000\065\000\016\000\
    \005\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\017\000\064\000\012\000\014\000\018\000\044\000\
    \033\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\013\000\000\000\008\000\056\000\056\000\
    \069\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\043\000\032\000\023\000\029\000\
    \000\000\028\000\000\000\021\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\031\000\
    \056\000\056\000\000\000\022\000\030\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\035\000\
    \000\000\000\000\000\000\003\000\034\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\005\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\041\000\000\000\000\000\038\000\039\000\040\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \015\000\037\000\046\000\000\000\068\000\047\000\036\000\045\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\049\000\000\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \026\000\027\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\049\000\048\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\048\000\000\000\063\000\025\000\062\000\000\000\050\000\
    \058\000\024\000\058\000\048\000\048\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\073\000\
    \073\000\000\000\073\000\073\000\000\000\050\000\051\000\000\000\
    \000\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \073\000\000\000\000\000\052\000\048\000\000\000\073\000\000\000\
    \000\000\000\000\000\000\000\000\053\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\000\000\000\000\000\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\073\000\073\000\000\000\
    \073\000\073\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\000\000\000\000\073\000\000\000\
    \000\000\000\000\000\000\000\000\073\000\000\000\072\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\000\000\000\000\000\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\061\000\000\000\000\000\000\000\000\000\
    \072\000\000\000\000\000\000\000\000\000\000\000\072\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\072\000\000\000\000\000\000\000\072\000\000\000\
    \072\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\000\000\020\000\020\000\
    \255\255\020\000\020\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\020\000\066\000\255\255\
    \000\000\000\000\000\000\000\000\011\000\000\000\062\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\063\000\000\000\000\000\000\000\009\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\051\000\051\000\
    \066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\010\000\016\000\019\000\027\000\
    \255\255\027\000\255\255\019\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\255\255\026\000\
    \056\000\056\000\255\255\019\000\026\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\033\000\
    \255\255\255\255\255\255\003\000\033\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\039\000\255\255\255\255\012\000\012\000\039\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\012\000\044\000\255\255\066\000\006\000\012\000\044\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \255\255\255\255\255\255\255\255\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\255\255\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\255\255\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\004\000\255\255\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \018\000\018\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\005\000\004\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\255\255\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\005\000\255\255\059\000\018\000\059\000\255\255\004\000\
    \048\000\018\000\048\000\004\000\049\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\073\000\
    \073\000\255\255\073\000\073\000\255\255\005\000\005\000\255\255\
    \255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \073\000\255\255\255\255\005\000\049\000\255\255\073\000\255\255\
    \255\255\255\255\255\255\255\255\005\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\053\000\053\000\
    \053\000\053\000\053\000\053\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\054\000\054\000\054\000\
    \054\000\054\000\054\000\255\255\255\255\255\255\053\000\053\000\
    \053\000\053\000\053\000\053\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\054\000\054\000\054\000\
    \054\000\054\000\054\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\069\000\069\000\255\255\
    \069\000\069\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\255\255\255\255\069\000\255\255\
    \255\255\255\255\255\255\255\255\069\000\255\255\069\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\255\255\255\255\255\255\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\059\000\255\255\255\255\255\255\255\255\
    \069\000\255\255\255\255\255\255\255\255\255\255\069\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\069\000\255\255\255\255\255\255\069\000\255\255\
    \069\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 142 "lexcmm.mll"
      ( token lexbuf )
# 378 "lexcmm.ml"

  | 1 ->
# 143 "lexcmm.mll"
         ( ADDA )
# 383 "lexcmm.ml"

  | 2 ->
# 144 "lexcmm.mll"
         ( ADDV )
# 388 "lexcmm.ml"

  | 3 ->
# 145 "lexcmm.mll"
         ( ADDF )
# 393 "lexcmm.ml"

  | 4 ->
# 146 "lexcmm.mll"
        ( ADDI )
# 398 "lexcmm.ml"

  | 5 ->
# 147 "lexcmm.mll"
          ( ASR )
# 403 "lexcmm.ml"

  | 6 ->
# 148 "lexcmm.mll"
        ( COLON )
# 408 "lexcmm.ml"

  | 7 ->
# 149 "lexcmm.mll"
         ( DIVF )
# 413 "lexcmm.ml"

  | 8 ->
# 150 "lexcmm.mll"
        ( DIVI )
# 418 "lexcmm.ml"

  | 9 ->
# 151 "lexcmm.mll"
        ( EOF )
# 423 "lexcmm.ml"

  | 10 ->
# 152 "lexcmm.mll"
          ( EQA )
# 428 "lexcmm.ml"

  | 11 ->
# 153 "lexcmm.mll"
          ( EQF )
# 433 "lexcmm.ml"

  | 12 ->
# 154 "lexcmm.mll"
         ( EQI )
# 438 "lexcmm.ml"

  | 13 ->
# 155 "lexcmm.mll"
          ( GEA )
# 443 "lexcmm.ml"

  | 14 ->
# 156 "lexcmm.mll"
          ( GEF )
# 448 "lexcmm.ml"

  | 15 ->
# 157 "lexcmm.mll"
         ( GEI )
# 453 "lexcmm.ml"

  | 16 ->
# 158 "lexcmm.mll"
         ( GTA )
# 458 "lexcmm.ml"

  | 17 ->
# 159 "lexcmm.mll"
         ( GTF )
# 463 "lexcmm.ml"

  | 18 ->
# 160 "lexcmm.mll"
        ( GTI )
# 468 "lexcmm.ml"

  | 19 ->
# 161 "lexcmm.mll"
        ( LBRACKET )
# 473 "lexcmm.ml"

  | 20 ->
# 162 "lexcmm.mll"
          ( LEA )
# 478 "lexcmm.ml"

  | 21 ->
# 163 "lexcmm.mll"
          ( LEF )
# 483 "lexcmm.ml"

  | 22 ->
# 164 "lexcmm.mll"
         ( LEI )
# 488 "lexcmm.ml"

  | 23 ->
# 165 "lexcmm.mll"
        ( LPAREN )
# 493 "lexcmm.ml"

  | 24 ->
# 166 "lexcmm.mll"
         ( LSL )
# 498 "lexcmm.ml"

  | 25 ->
# 167 "lexcmm.mll"
          ( LSR )
# 503 "lexcmm.ml"

  | 26 ->
# 168 "lexcmm.mll"
         ( LTA )
# 508 "lexcmm.ml"

  | 27 ->
# 169 "lexcmm.mll"
         ( LTF )
# 513 "lexcmm.ml"

  | 28 ->
# 170 "lexcmm.mll"
        ( LTI )
# 518 "lexcmm.ml"

  | 29 ->
# 171 "lexcmm.mll"
         ( MULF )
# 523 "lexcmm.ml"

  | 30 ->
# 172 "lexcmm.mll"
        ( MULI )
# 528 "lexcmm.ml"

  | 31 ->
# 173 "lexcmm.mll"
          ( NEA )
# 533 "lexcmm.ml"

  | 32 ->
# 174 "lexcmm.mll"
          ( NEF )
# 538 "lexcmm.ml"

  | 33 ->
# 175 "lexcmm.mll"
         ( NEI )
# 543 "lexcmm.ml"

  | 34 ->
# 176 "lexcmm.mll"
        ( RBRACKET )
# 548 "lexcmm.ml"

  | 35 ->
# 177 "lexcmm.mll"
        ( RPAREN )
# 553 "lexcmm.ml"

  | 36 ->
# 178 "lexcmm.mll"
        ( STAR )
# 558 "lexcmm.ml"

  | 37 ->
# 179 "lexcmm.mll"
         ( SUBF )
# 563 "lexcmm.ml"

  | 38 ->
# 180 "lexcmm.mll"
        ( SUBI )
# 568 "lexcmm.ml"

  | 39 ->
# 183 "lexcmm.mll"
      ( INTCONST(int_of_string(Lexing.lexeme lexbuf)) )
# 573 "lexcmm.ml"

  | 40 ->
# 185 "lexcmm.mll"
      ( let s = Lexing.lexeme lexbuf in
        POINTER(int_of_string(String.sub s 0 (String.length s - 1))) )
# 579 "lexcmm.ml"

  | 41 ->
# 188 "lexcmm.mll"
      ( FLOATCONST(Lexing.lexeme lexbuf) )
# 584 "lexcmm.ml"

  | 42 ->
# 192 "lexcmm.mll"
      ( let s = Lexing.lexeme lexbuf in
        try
          Hashtbl.find keyword_table s
        with Not_found ->
          IDENT s )
# 593 "lexcmm.ml"

  | 43 ->
# 198 "lexcmm.mll"
      ( reset_string_buffer();
        string lexbuf;
        STRING (get_stored_string()) )
# 600 "lexcmm.ml"

  | 44 ->
# 202 "lexcmm.mll"
      ( comment_depth := 1;
        comment lexbuf;
        token lexbuf )
# 607 "lexcmm.ml"

  | 45 ->
# 205 "lexcmm.mll"
      ( raise(Error(Illegal_character)) )
# 612 "lexcmm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 59
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 209 "lexcmm.mll"
      ( comment_depth := succ !comment_depth; comment lexbuf )
# 624 "lexcmm.ml"

  | 1 ->
# 211 "lexcmm.mll"
      ( comment_depth := pred !comment_depth;
        if !comment_depth > 0 then comment lexbuf )
# 630 "lexcmm.ml"

  | 2 ->
# 214 "lexcmm.mll"
      ( raise (Error(Unterminated_comment)) )
# 635 "lexcmm.ml"

  | 3 ->
# 216 "lexcmm.mll"
      ( comment lexbuf )
# 640 "lexcmm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 66
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 220 "lexcmm.mll"
      ( () )
# 652 "lexcmm.ml"

  | 1 ->
# 222 "lexcmm.mll"
      ( string lexbuf )
# 657 "lexcmm.ml"

  | 2 ->
# 224 "lexcmm.mll"
      ( store_string_char(char_for_backslash(Lexing.lexeme_char lexbuf 1));
        string lexbuf )
# 663 "lexcmm.ml"

  | 3 ->
# 227 "lexcmm.mll"
      ( store_string_char(char_for_decimal_code lexbuf 1);
         string lexbuf )
# 669 "lexcmm.ml"

  | 4 ->
# 230 "lexcmm.mll"
      ( raise (Error(Unterminated_string)) )
# 674 "lexcmm.ml"

  | 5 ->
# 232 "lexcmm.mll"
      ( store_string_char(Lexing.lexeme_char lexbuf 0);
        string lexbuf )
# 680 "lexcmm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

